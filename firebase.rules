rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }
    
    function isEditor() {
      return isAuthenticated() && 
        (request.auth.token.role == 'editor' || request.auth.token.role == 'admin');
    }
    
    function isValidContentType() {
      return request.resource.contentType.matches('image/.*') &&
        (request.resource.contentType == 'image/jpeg' ||
         request.resource.contentType == 'image/png' ||
         request.resource.contentType == 'image/webp' ||
         request.resource.contentType == 'image/gif');
    }
    
    function isValidFileSize() {
      return request.resource.size <= 5 * 1024 * 1024; // 5MB
    }
    
    function hasValidMetadata() {
      return request.resource.metadata != null &&
             request.resource.metadata.uploadedBy == request.auth.uid;
    }
    
    function isWithinRateLimit() {
      return request.time.toMillis() - 
             resource.metadata.lastUpload.toMillis() > 60000; // 1 minute
    }

    match /media/{fileName} {
      allow read: if isAuthenticated();
      allow create: if isEditor() &&
                      isValidContentType() &&
                      isValidFileSize() &&
                      hasValidMetadata() &&
                      isWithinRateLimit();
      allow update: if isEditor() &&
                      isValidContentType() &&
                      isValidFileSize() &&
                      resource.metadata.uploadedBy == request.auth.uid;
      allow delete: if isEditor() &&
                      resource.metadata.uploadedBy == request.auth.uid;
    }

    match /avatars/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
                     request.auth.uid == userId &&
                     isValidContentType() &&
                     isValidFileSize();
    }
  }
}