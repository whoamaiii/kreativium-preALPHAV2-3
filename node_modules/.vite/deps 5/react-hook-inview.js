import {
  require_react
} from "./chunk-VJA5E53X.js";
import {
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/react-hook-inview/dist/esm/useInView.js
var import_react2 = __toESM(require_react());

// node_modules/react-hook-inview/dist/esm/useObserver.js
var import_react = __toESM(require_react());
var useObserver = (callback, { root, rootMargin, threshold } = {}, externalState = []) => {
  const target = (0, import_react.useRef)(null);
  const observer = (0, import_react.useRef)(null);
  const setTarget = (0, import_react.useCallback)((node) => {
    if (target.current && observer.current) {
      observer.current.unobserve(target.current);
      observer.current.disconnect();
      observer.current = null;
    }
    if (node) {
      observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });
      observer.current.observe(node);
      target.current = node;
    }
  }, [target, root, rootMargin, JSON.stringify(threshold), ...externalState]);
  return setTarget;
};
var useObserver_default = useObserver;

// node_modules/react-hook-inview/dist/esm/useInView.js
var useInView = ({ root, rootMargin, threshold, unobserveOnEnter, target, onEnter, onLeave, defaultInView } = {}, externalState = []) => {
  const [state, setState] = (0, import_react2.useState)({
    inView: defaultInView || false,
    entry: null,
    observer: null
  });
  const callback = (0, import_react2.useCallback)(([entry], observer) => {
    const inThreshold = observer.thresholds.some((t) => entry.intersectionRatio >= t);
    const inView = inThreshold && entry.isIntersecting;
    setState({
      inView,
      entry,
      observer
    });
    if (inView && unobserveOnEnter) {
      observer.unobserve(entry.target);
      observer.disconnect();
    }
    if (inView) {
      onEnter === null || onEnter === void 0 ? void 0 : onEnter(entry, observer);
    } else {
      onLeave === null || onLeave === void 0 ? void 0 : onLeave(entry, observer);
    }
  }, [onEnter, onLeave, unobserveOnEnter]);
  const setTarget = useObserver_default(callback, { root, rootMargin, threshold }, [unobserveOnEnter, ...externalState]);
  (0, import_react2.useEffect)(() => {
    if (target === null || target === void 0 ? void 0 : target.current)
      setTarget(target.current);
  }, [target, setTarget]);
  return [setTarget, state.inView, state.entry, state.observer];
};
var useInView_default = useInView;
export {
  useInView_default as useInView,
  useObserver_default as useInViewEffect
};
//# sourceMappingURL=react-hook-inview.js.map
